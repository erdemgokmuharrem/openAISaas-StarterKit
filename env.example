# AI SaaS Starter Kit - Environment Variables
# Copy this file to .env.local and fill in your actual values

# ===========================================
# DATABASE CONFIGURATION
# ===========================================
# PostgreSQL database connection string
# Format: postgresql://username:password@host:port/database_name
# Examples:
# Local: postgresql://postgres:password@localhost:5432/ai_saas_starter
# Supabase: postgresql://postgres:[password]@[host]:5432/postgres
# PlanetScale: mysql://[username]:[password]@[host]/[database]?sslaccept=strict
DATABASE_URL="postgresql://username:password@localhost:5432/your_database_name"

# ===========================================
# NEXTAUTH.JS CONFIGURATION
# ===========================================
# Your application URL (change to your domain in production)
NEXTAUTH_URL="http://localhost:3000"

# Secret key for JWT encryption (generate a random string)
# You can generate one at: https://generate-secret.vercel.app/32
NEXTAUTH_SECRET="your-super-secret-nextauth-key-here"

# ===========================================
# GOOGLE OAUTH CONFIGURATION
# ===========================================
# Get these from Google Cloud Console: https://console.cloud.google.com/
# 1. Create a new project or select existing
# 2. Enable Google+ API
# 3. Create OAuth 2.0 credentials
# 4. Add authorized redirect URI: http://localhost:3000/api/auth/callback/google
GOOGLE_CLIENT_ID="your-google-client-id.apps.googleusercontent.com"
GOOGLE_CLIENT_SECRET="your-google-client-secret"

# ===========================================
# EMAIL PROVIDER CONFIGURATION (Optional)
# ===========================================
# Configure email authentication (Gmail example)
# For Gmail, you need to:
# 1. Enable 2-factor authentication
# 2. Generate an App Password: https://support.google.com/accounts/answer/185833
EMAIL_SERVER_HOST="smtp.gmail.com"
EMAIL_SERVER_PORT="587"
EMAIL_SERVER_USER="your-email@gmail.com"
EMAIL_SERVER_PASSWORD="your-app-password"
EMAIL_FROM="your-email@gmail.com"

# Alternative email providers:
# SendGrid: smtp.sendgrid.net
# Mailgun: smtp.mailgun.org
# AWS SES: email-smtp.us-east-1.amazonaws.com

# ===========================================
# OPENAI API CONFIGURATION
# ===========================================
# Get your API key from: https://platform.openai.com/api-keys
# Make sure you have billing set up on your OpenAI account
OPENAI_API_KEY="sk-your-openai-api-key-here"

# ===========================================
# STRIPE CONFIGURATION
# ===========================================
# Get these from Stripe Dashboard: https://dashboard.stripe.com/
# Test keys (for development):
STRIPE_SECRET_KEY="sk_test_your_stripe_secret_key_here"
STRIPE_PUBLISHABLE_KEY="pk_test_your_stripe_publishable_key_here"

# Production keys (for production):
# STRIPE_SECRET_KEY="sk_live_your_live_stripe_secret_key_here"
# STRIPE_PUBLISHABLE_KEY="pk_live_your_live_stripe_publishable_key_here"

# Stripe Price ID for Pro Plan
# Create a product and price in Stripe Dashboard, then copy the price ID
STRIPE_PRO_PLAN_PRICE_ID="price_your_pro_plan_price_id_here"

# Stripe Webhook Secret
# 1. Go to Stripe Dashboard > Webhooks
# 2. Create endpoint: https://yourdomain.com/api/webhooks/stripe
# 3. Select events: checkout.session.completed, customer.subscription.updated, customer.subscription.deleted
# 4. Copy the webhook secret
STRIPE_WEBHOOK_SECRET="whsec_your_webhook_secret_here"

# ===========================================
# OPTIONAL CONFIGURATIONS
# ===========================================

# Rate Limiting (optional)
# RATE_LIMIT_MAX_REQUESTS="100"
# RATE_LIMIT_WINDOW_MS="900000"

# Analytics (optional)
# GOOGLE_ANALYTICS_ID="G-XXXXXXXXXX"

# Error Tracking (optional)
# SENTRY_DSN="https://your-sentry-dsn@sentry.io/project-id"

# ===========================================
# PRODUCTION NOTES
# ===========================================
# For production deployment:
# 1. Use production database (Supabase, PlanetScale, Railway, etc.)
# 2. Update NEXTAUTH_URL to your production domain
# 3. Use production Stripe keys
# 4. Set up production webhook endpoints
# 5. Configure proper CORS settings
# 6. Set up monitoring and error tracking

# ===========================================
# DEVELOPMENT vs PRODUCTION
# ===========================================
# Development: Use test keys and local database
# Production: Use live keys and production database
# 
# Never commit .env.local to version control!
# Always use environment variables in production